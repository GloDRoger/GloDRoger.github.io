隐藏input输入框的增减按钮
/* 谷歌 */ 
input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    appearance: none;
    margin: 0;
} 

/* 火狐 */ 
input{
  -moz-appearance:textfield;
}


修改placeholder的样式
::-webkit-input-placeholder {
        color: red;
    }
    ::-moz-placeholder {
        color: red;
    }
    :-ms-input-placeholder {
        color: red;
    }

css scrollbar样式设置
::-webkit-scrollbar    //滚动条整体部分
::-webkit-scrollbar-button   //滚动条两端的按钮
::-webkit-scrollbar-track   // 外层轨道
::-webkit-scrollbar-track-piece    //内层轨道，滚动条中间部分（除去）
::-webkit-scrollbar-thumb //滚动条里面可以拖动的那个
::-webkit-scrollbar-corner   //边角
::-webkit-resizer   ///定义右下角拖动块的样式

padding-bottom实现普通元素固定宽高比
<div class="wrapper">
  <div class="intrinsic-aspect-ratio-container"></div>
</div>
.wrapper {
  width: 40vw;
}
.intrinsic-aspect-ratio-container {
  width: 100%;
  height: 0;
  padding: 0;
  padding-bottom: 75%;
  margin: 50px;
  background-color: lightsalmon;
}
如上代码，我们将div元素的高度设为了0，通过padding-bottom来撑开盒子的高度，实现了4/3的固定宽高比。
这样是实现了固定宽高比，但其只是一个徒有其表的空盒子，里面没有内容。如果想在里面放入内容，我们还需要将div`内部的内容使用绝对定位来充满固定尺寸的容器元素。
通过这种方式我们就可以实现一个可以填充内容的固定尺寸的容器了。
此外，尺寸比例，我们也可以通过calc()来计算，这样比较灵活。我们可以快速的写出任意比例，如padding-bottom: calc(33 / 17 * 100%);。


动态设置html的font-size以使用rem使pc进行适应性调整。
js部分：
/* 动态设置根子号 */
function setRem() {
  let scale = document.documentElement.clientWidth / 100
  document.documentElement.style.fontSize = scale +  'px'
}
setRem()
window.onresize = function () {
  setRem()
}

scss部分：
// PX 转 rem 
@function px2Rem($px, $base-font-size: 19.2px) {
    @if (unitless($px)) { 
        //有无单位 
        @return ($px / 19.2) * 1rem; 
    } @else if (unit($px) == em) { 
        @return $px; 
    } 
    @return ($px / $base-font-size) * 1rem; 
}
PC实现适配也是用了rem这个css3属性，rem相对于根元素(即html元素)font-size计算值的倍数。这里以PC常见的分辨率1920px和1366px(14寸笔记本)为例说明。为了更好的说明，假设设计师给的设计稿是1920px，我们既要做1920px屏幕，也要给1366px的屏幕做适配。
现在我们随便取1920px设计稿一块区域，假设宽度273px，高度随意。那么在1366px屏幕上宽度应该显示多少呢？
我们将屏幕宽度等比分成100份
//1920分辨率屏幕
avg = 1920 / 100 = 19.20 px

//1366分辨率屏幕
avg = 1366 / 100 = 13.66 px
复制代码
在1366分辨率屏幕应该显示宽度 = (1366 * 273) / 1920 最后是194.228125px
//1920分辨率屏幕定义根
font-size = 19.20px //即 1rem = 19.20px

//1366分辨率屏幕
font-size = 13.66px  //即 1rem = 13.66px

适配代码
html{
   font-size:19.20px;  /*默认以设计稿为基准*/
}

@media only screen and (max-width: 1366px) {
   html{
      font-size:13.66px;
   }
}
#test{
   width:14.21875rem;
}
复制代码
id为test的盒子在1920屏幕宽度= 14.21875 * 19.20 最后是273
id为test的盒子在1366屏幕宽度= 14.21875 * 13.66 最后是194.228125
这样一来我们就适配了1920px和1366px屏幕。PC一般也就是这两个分辨率占多数，兼容了这两个分辨率屏幕基本就可以了。
